{"version":3,"sources":["actions/actions.js","components/NavigationPane.jsx","components/AddCity.jsx","components/AllListing.jsx","components/Dashboard.jsx","components/parentComponent.jsx","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["updateStateList","data","dispatch","type","payload","connect","state","props","selectedMenuItem","setSelectedMenu","menuDisplay","map","menu","menuClass","className","onClick","menuItem","selectMenu","stateList","stateOptions","districtOptions","useState","City","State","District","newData","updateNewData","updateValue","e","key","dummyData","target","value","closeCB","class","onChange","name","district","push","alert","addDetails","shortlistedList","shortListedList","updateShortListItems","listData","isShortListed","isAdd","updateAddStatus","searchText","updateSearchText","length","dummyList","includes","shortListOperation","options","action","index","dummyShortListData","msg","splice","detailsHtml","isPresent","item","checkShortList","dummyStateData","removeStateData","getAllTableData","placeholder","text","searchList","style","textAlign","marginLeft","Dashboard","states","setStateList","axios","get","then","res","sort","useEffect","overflowX","App","Boolean","window","location","hostname","match","initialState","rootReducer","dummyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f51aca4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const setStateList = (data = {}) => {\r\n    return (dispatch) => {\r\n        axios.get('https://api.jsonbin.io/b/5f5c76a5302a837e9564b5ca')\r\n        .then((res) =>{\r\n                let { data } = res;\r\n                let district = [];\r\n                let state = [];\r\n                data.map(item => {\r\n                    if(!district.includes(item.District)){\r\n                        district.push(item.District);\r\n                    }\r\n                    if(!state.includes(item.State)){\r\n                        state.push(item.State);\r\n                    }\r\n                })\r\n                district.sort();\r\n                state.sort();\r\n                dispatch({\r\n                    type: 'SET_STATE_LIST',\r\n                    payload: {\r\n                        data: data,\r\n                        stateOptions: state,\r\n                        districtOptions: district\r\n                    }\r\n                });\r\n            }\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport const setSelectedMenu = (data = {}) => {\r\n    return (dispatch => {\r\n        dispatch({\r\n            type: 'SET_MENU_ITEM',\r\n            payload: data\r\n        })\r\n    })\r\n}\r\n\r\nexport const updateShortListItems = (data = {}) => {\r\n    return (dispatch => {\r\n        dispatch({\r\n            type: 'UPDATE_SHORT_LIST',\r\n            payload: data\r\n        })\r\n    })\r\n}\r\n\r\nexport const updateStateList = (data = {}) => {\r\n    return (dispatch => {\r\n        dispatch({\r\n            type:'UPDATE_STATE_LIST',\r\n            payload: data\r\n        })\r\n    })\r\n}","import React from 'react';\r\nimport {setSelectedMenu} from '../actions/actions';\r\nimport './navigation-pane.css';\r\nimport {connect} from 'react-redux';\r\n\r\nconst NavigationPane= (props) =>  {\r\n    let menuItem = [\r\n        'ALL',\r\n        'SHORT LISTED'\r\n    ]\r\n    \r\n    const selectMenu = (menuItem)=>{\r\n        props.setSelectedMenu({\r\n            menuItem\r\n        })\r\n    }\r\n\r\n    //Mapping the HTML for the NAVIGATION PANE ON THE LEFT\r\n    let menuDisplay = menuItem.map(menu => {\r\n        let menuClass = 'menu-item';\r\n        if(menu == props.selectedMenuItem){\r\n            menuClass += ' selected-menu'; \r\n        }\r\n        return (\r\n            <div className = {menuClass} onClick={()=>{selectMenu(menu)}}>\r\n                {menu}\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='navigation-panel'>\r\n            <div className=\"title-nav\">STATE SELECTOR INFO</div>\r\n            {menuDisplay}\r\n            <div className='water-mark'>Created By Varun Mukherjee</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,props) => {\r\n    return {\r\n        selectedMenuItem: state.selectedMenuItem,\r\n        ...props\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n    setSelectedMenu\r\n})(NavigationPane)\r\n","import React,{useState} from 'react';\r\nimport './dashboard.css';\r\nimport {connect} from 'react-redux';\r\nimport { updateStateList } from '../actions/actions';\r\n\r\nconst AddCity = (props) => {\r\n    const [newData,updateNewData] = useState({\r\n        City: '',\r\n        State: props.stateOptions[0],\r\n        District: props.districtOptions[0],\r\n    })\r\n\r\n    //Updating the values of the Form\r\n    const updateValue = (e,key) => {\r\n        let dummyData = {...newData};\r\n        dummyData[key] = e.target.value;\r\n        updateNewData(dummyData);\r\n    }\r\n\r\n    //Saving the details of the state,district,city where city is mandatory\r\n    const addDetails = () => {\r\n        let dummyData = [...props.stateList];\r\n        if(newData.City){\r\n            dummyData.push(newData);\r\n            props.updateStateList(dummyData);\r\n            props.closeCB && props.closeCB();\r\n        }else{\r\n            alert(\"Please Enter City\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='overlay' onClick={() => {props.closeCB()}}></div>\r\n            <div class='add-city'>\r\n                <div className=\"add-title\">ADD NEW INFORMATION (City,State,District)</div>\r\n                <div className='close-icon' onClick={props.closeCB}>X</div>\r\n                <div className=\"input-text\">\r\n                    <div className=\"tab-title\">State :</div>\r\n                    <div className=\"input-field\">\r\n                        <select type='text' value={newData.State} onChange={(e)=>{updateValue(e,'State')}}>\r\n                            {props.stateOptions.map(state => {\r\n                                return (<option name={state}>{state}</option>)\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"input-text\">\r\n                    <div className=\"tab-title\">District :</div>\r\n                    <div className=\"input-field\">\r\n                        <select type='text' value={newData.District} onChange={(e)=>{updateValue(e,'District')}}>\r\n                            {props.districtOptions.map(district => {\r\n                                return (<option name={district}>{district}</option>)\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"input-text\">\r\n                    <div className='tab-title'>City :</div>\r\n                    <div className='input-field'><input type='text' value={newData.City} onChange={(e)=>{updateValue(e,'City')}}/></div>\r\n                </div >\r\n                <div onClick={() => {addDetails()}} className=\"button add-info\">SAVE</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,props) => {\r\n    return {\r\n        stateList: state.stateList,\r\n        stateOptions: state.stateOptions,\r\n        districtOptions: state.districtOptions,\r\n        ...props\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n    updateStateList\r\n})(AddCity)\r\n","import React,{useEffect,useState} from 'react';\r\nimport AddCity from './AddCity';\r\nimport {updateShortListItems,updateStateList} from '../actions/actions';\r\nimport {connect} from 'react-redux';\r\nimport './dashboard.css';\r\n\r\nconst AllListing = (props) => {\r\n    let listData = props.selectedMenuItem == 'ALL' ? props.stateList : props.shortlistedList;\r\n    let isShortListed = props.selectedMenuItem == 'ALL' ? false : true;\r\n    const [isAdd,updateAddStatus] = useState(false);\r\n    const [searchText,updateSearchText] = useState('');\r\n    \r\n    //Filtering the data as per the search Text since the text is a state variable the re render runs again.\r\n    if(searchText && listData.length > 0){\r\n        let dummyList = [];\r\n        listData.map(data => {\r\n            if(data.City.includes(searchText) || data.State.includes(searchText) || data.District.includes(searchText))\r\n                dummyList.push(data);\r\n        });\r\n        listData = dummyList;\r\n    }\r\n    \r\n    const checkShortList = (data) => {\r\n        let isPresent = false;\r\n        props.shortlistedList.length > 0 && props.shortlistedList.map((item) => {\r\n            if(item.City == data.City){\r\n                isPresent = true;\r\n            }\r\n        })\r\n        return isPresent;\r\n    }\r\n\r\n    const shortListOperation = (options ={}) =>{\r\n        let {action = 'add', data ={}, index } = options;\r\n        let dummyShortListData = [...props.shortlistedList];\r\n        let msg = action == 'add' ? 'ShortListed':'Removed from ShortListing'\r\n        if(action == 'add'){\r\n            dummyShortListData.push(data);\r\n        }else{\r\n            dummyShortListData.splice(index,1);\r\n        }\r\n        props.updateShortListItems(dummyShortListData);\r\n        alert(msg);\r\n    }\r\n\r\n    const removeStateData = (options = {}) =>{\r\n        let {index} = options;\r\n        let dummyStateData = [...props.stateList];\r\n        dummyStateData.splice(index,1);\r\n        props.updateStateList(dummyStateData);\r\n        alert('City Deleted');\r\n    }\r\n\r\n    const searchList = (e) => {\r\n        let text  = e.target.value;\r\n        updateSearchText(text);\r\n    }\r\n\r\n    //For table cells the data is rendered and for shortlist and all table cells\r\n    const getAllTableData = () =>{\r\n        if(listData.length > 0){\r\n            let dummyDetail =  listData.map((data,index) => {\r\n                return (\r\n                    <div className='table-data'>\r\n                        <div className=\"table-cell\">{data.State}</div>\r\n                        <div className=\"table-cell\">{data.District}</div>\r\n                        <div className=\"table-cell\">{data.City}</div>\r\n                        <div className=\"table-cell\">\r\n                            {!isShortListed && <>\r\n                                {!checkShortList(data) && <div className=\"button\" onClick={()=>{shortListOperation({action:'add',data})}}>ShortList</div>}\r\n                                <div className=\"button delete\" onClick={() => {removeStateData({index})}}>Delete</div>\r\n                            </>}\r\n                            {isShortListed && <>\r\n                                <div className=\"button\" onClick={() => {shortListOperation({action:'remove',index})}}>Remove</div>\r\n                            </>}\r\n                        </div>\r\n                    </div>            \r\n                )\r\n            })\r\n            return dummyDetail;   \r\n        }\r\n    }\r\n\r\n    let detailsHtml = getAllTableData(listData);\r\n\r\n    return (\r\n        <div>\r\n            <div className='table-container'>\r\n                {!isShortListed && listData.length > 0 && <div className='button add-city-btn' onClick = {() => {updateAddStatus(true)}}>+ Add City</div>}\r\n                {(listData.length > 0 || searchText )  && <div className=\"search-input\">\r\n                    <input type='text' placeholder=\"Search List by City, State, District\" value={searchText} onChange={(e) => {searchList(e)}} />\r\n                </div>}\r\n                {listData.length > 0 && <div className='table-title'>\r\n                    <div className=\"table-cell\">STATE</div>\r\n                    <div className=\"table-cell\">DISTRICT</div>\r\n                    <div className=\"table-cell\">CITY</div>\r\n                    <div className=\"table-cell\">ACTION</div>\r\n                </div>} \r\n                <div className='table-data-container'>\r\n                    {detailsHtml}\r\n                </div>   \r\n                {listData.length == 0 && <div style={{textAlign:'left',marginLeft:'34%'}}>\r\n                    {isShortListed ? <div className=\"no-results\">Nothing ShortListed</div>:searchText ? <div className=\"no-result\">No Search Match Foud...</div>:<div className=\"no-results\">Data Loading...</div>}    \r\n                </div>}\r\n                {isAdd && <AddCity closeCB={()=>{updateAddStatus(false)}}/>}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,props) => {\r\n    return {\r\n        stateList: state.stateList,\r\n        shortlistedList: state.shortListedList,\r\n        selectedMenuItem: state.selectedMenuItem,\r\n        ...props\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n    updateShortListItems,\r\n    updateStateList\r\n})(AllListing)\r\n","import React from 'react';\r\nimport AllListing from './AllListing';\r\nimport './dashboard.css';\r\n\r\nconst Dashboard = (props) => {\r\n    return (\r\n        <div className='dash-board-panel'>\r\n            <AllListing />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (Dashboard)\r\n","import React,{ useEffect } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport NavigationPane from './NavigationPane';\r\nimport Dashboard from './Dashboard'\r\nimport {setStateList} from '../actions/actions';\r\n\r\nconst ParentComponent = (props) => {\r\n\r\n    useEffect(()=>{\r\n        //Fetching and setting the data in REDUX from the API\r\n        props.setStateList();\r\n    },[]);\r\n\r\n    return (\r\n        <div style={{overflowX:'hidden'}}>\r\n            <NavigationPane />   \r\n            <Dashboard />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state,props) => {\r\n    return {\r\n        states: state.stateList,\r\n        ...props\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{\r\n    setStateList\r\n})(ParentComponent)\r\n","import React from 'react';\nimport ParentComponent from './components/parentComponent';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ParentComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    stateList : [],\r\n    stateOptions: [],\r\n    districtOptions: [],\r\n    selectedMenuItem: 'ALL',\r\n    shortListedList: []\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    let dummyState = {...state};\r\n    switch(action.type){\r\n        case 'SET_STATE_LIST':\r\n            dummyState.stateList = action.payload.data;\r\n            dummyState.stateOptions = action.payload.stateOptions;\r\n            dummyState.districtOptions = action.payload.districtOptions;\r\n            return dummyState;\r\n        case 'SET_MENU_ITEM':\r\n            dummyState.selectedMenuItem = action.payload.menuItem;\r\n            return dummyState;\r\n        case 'UPDATE_SHORT_LIST':\r\n            dummyState.shortListedList = action.payload;\r\n            return dummyState;\r\n        case 'UPDATE_STATE_LIST':\r\n            dummyState.stateList = action.payload;\r\n            return dummyState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}